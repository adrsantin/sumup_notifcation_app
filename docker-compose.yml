services:
  app:
    build: .
    ports:
     - "8080:8080"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=user
      - DB_PASSWORD=password
      - DB_NAME=sumup
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - go-network

  mysql:
    container_name: go-mysql
    image: mysql:9.0
    ports:
     - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
      - MYSQL_DATABASE=sumup
    volumes:
      - ./internal/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - go-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    networks:
      - kafka-network
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000    
    ports:
      - "2181:2181" 
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ] 
      interval: 10s                      
      timeout: 5s        
      retries: 5  

  kafka:
    container_name: go-kafka
    image: confluentinc/cp-kafka:latest
    networks:
      - kafka-network
    depends_on:
      zookeeper:
        condition: service_healthy 
    ports:
      - "9092:9092"                    
    environment:
      - KAFKA_BROKER_ID=1               
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1    
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]  
      interval: 30s
      timeout: 10s
      retries: 3

  init-kafka:
    build:
      context: ./kafka-init
      dockerfile: Dockerfile
    networks:
      - kafka-network
    depends_on:
      kafka:
        condition: service_healthy 

volumes:
  dbdata:

networks:
  go-network:
    driver: bridge
  kafka-network:
    name: kafka-network
    driver: bridge