// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go
//
// Generated by this command:
//
//	mockgen -source=repositories.go -destination=../mocks/repositories.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entities "sumup/notifications/internal/entities"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserDataByID mocks base method.
func (m *MockUserRepository) GetUserDataByID(id int) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByID", id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByID indicates an expected call of GetUserDataByID.
func (mr *MockUserRepositoryMockRecorder) GetUserDataByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserDataByID), id)
}

// GetUserNotificationTypesByUserID mocks base method.
func (m *MockUserRepository) GetUserNotificationTypesByUserID(id int) ([]entities.NotificationType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserNotificationTypesByUserID", id)
	ret0, _ := ret[0].([]entities.NotificationType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserNotificationTypesByUserID indicates an expected call of GetUserNotificationTypesByUserID.
func (mr *MockUserRepositoryMockRecorder) GetUserNotificationTypesByUserID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserNotificationTypesByUserID", reflect.TypeOf((*MockUserRepository)(nil).GetUserNotificationTypesByUserID), id)
}
